import 'package:barber_pogi/Admin/Admin_home.dart';
import 'package:barber_pogi/pages/forgot_password.dart';
import 'package:barber_pogi/services/shared_pref.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

class AdminLogin extends StatefulWidget {
  const AdminLogin({super.key});

  @override
  State<AdminLogin> createState() => _AdminLoginState();
}

class _AdminLoginState extends State<AdminLogin> {
  String? mail, password;
  TextEditingController emailcontroller = TextEditingController();
  TextEditingController passwordcontroller = TextEditingController();
  final _formkey = GlobalKey<FormState>();

  adminLogin() async {
    try {
      await FirebaseAuth.instance
          .signInWithEmailAndPassword(email: mail!, password: password!);
      await SharedpreferenceHelper().saveUserEmail(emailcontroller.text);
      Navigator.push(
          context, MaterialPageRoute(builder: (context) => AdminHome()));
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content: Text(
              "No user Found for that Email",
              style: TextStyle(fontSize: 18.0, color: Colors.black),
            )));
      } else if (e.code == 'wrong-password') {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content: Text(
              "Wrong Password Provided by User",
              style: TextStyle(fontSize: 18.0, color: Colors.black),
            )));
      }
    }
    emailcontroller.clear();
    passwordcontroller.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Brown and Maroon background with "S" shape curve
          Container(
            color: const Color(0xFF3E2723), // Brown background
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: ClipPath(
              clipper: SShapeClipper(), // Custom clipper for the maroon part
              child: Container(
                height: MediaQuery.of(context).size.height * 0.75,
                color: const Color(0xFF4E342E), // Maroon color
              ),
            ),
          ),
          SingleChildScrollView(
            child: Column(
              children: [
                // "Sign In" text at the center of the top section
                Container(
                  padding: const EdgeInsets.only(top: 50.0),
                  height: MediaQuery.of(context).size.height / 4,
                  width: MediaQuery.of(context).size.width,
                  child: const Center(
                    child: Text(
                      "Sign In",
                      style: TextStyle(
                        color: Color(0xFFE29452), // Orange color for the text
                        fontSize: 32.0,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.only(
                      top: 40.0, left: 30.0, right: 30.0, bottom: 30.0),
                  margin: EdgeInsets.only(
                      top: MediaQuery.of(context).size.height / 8),
                  height: MediaQuery.of(context).size.height,
                  decoration: const BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(40),
                      topRight: Radius.circular(40),
                    ),
                  ),
                  child: Form(
                    key: _formkey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          "Gmail",
                          style: TextStyle(
                            color: Color(0xFFE29452), // Orange color
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        TextFormField(
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return "Please Enter E-mail";
                            }
                            return null;
                          },
                          controller: emailcontroller,
                          decoration: const InputDecoration(
                            hintText: "Gmail",
                            prefixIcon: Icon(
                              Icons.mail_outline,
                              color: Color(0xFFE29452), // Orange icon
                            ),
                            focusedBorder: UnderlineInputBorder(
                              borderSide: BorderSide(
                                  color: Color(0xFFE29452)), // Orange underline
                            ),
                            enabledBorder: UnderlineInputBorder(
                              borderSide: BorderSide(
                                  color: Color(0xFFE29452)), // Orange underline
                            ),
                          ),
                        ),
                        const SizedBox(height: 40.0),
                        const Text(
                          "Password",
                          style: TextStyle(
                            color: Color(0xFFE29452), // Orange color
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        TextFormField(
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return "Please Enter Password";
                            }
                            return null;
                          },
                          controller: passwordcontroller,
                          decoration: const InputDecoration(
                            hintText: "Password",
                            prefixIcon: Icon(
                              Icons.password_outlined,
                              color: Color(0xFFE29452), // Orange icon
                            ),
                            focusedBorder: UnderlineInputBorder(
                              borderSide: BorderSide(
                                  color: Color(0xFFE29452)), // Orange underline
                            ),
                            enabledBorder: UnderlineInputBorder(
                              borderSide: BorderSide(
                                  color: Color(0xFFE29452)), // Orange underline
                            ),
                          ),
                          obscureText: true,
                        ),
                        const SizedBox(height: 30.0),
                        GestureDetector(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => ForgotPassword(),
                              ),
                            );
                          },
                          child: const Align(
                            alignment: Alignment.centerRight,
                            child: Text(
                              "Forgot Password",
                              style: TextStyle(
                                color: Color(0xFFE29452), // Orange color
                                fontSize: 18.0,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 100.0),
                        GestureDetector(
                          onTap: () {
                            if (_formkey.currentState!.validate()) {
                              setState(() {
                                mail = emailcontroller.text;
                                password = passwordcontroller.text;
                              });
                              adminLogin();
                            }
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(vertical: 10.0),
                            width: MediaQuery.of(context).size.width,
                            decoration: BoxDecoration(
                              color: const Color(0xFFE29452), // Orange button
                              borderRadius: BorderRadius.circular(30.0),
                            ),
                            child: const Center(
                              child: Text(
                                "SIGN IN",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 24.0,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// Custom clipper for the "S"-shaped curve between brown and maroon
class SShapeClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    var path = Path();

    // Left side lower
    path.lineTo(0, size.height * 0.8);

    // S-shape curve, right side higher
    path.quadraticBezierTo(size.width * 0.3, size.height * 0.9, size.width * 0.65, size.height * 0.7);
    path.quadraticBezierTo(size.width * 0.85, size.height * 0.6, size.width, size.height * 0.65);

    path.lineTo(size.width, 0);
    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) {
    return false;
  }
}
