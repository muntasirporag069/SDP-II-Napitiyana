import 'package:barber_pogi/Barber/Barber_login.dart';
import 'package:barber_pogi/Barber/booking_barber.dart';
import 'package:barber_pogi/services/database.dart';
import 'package:barber_pogi/services/shared_pref.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:random_string/random_string.dart';

class BarberSignup extends StatefulWidget {
  const BarberSignup({super.key});

  @override
  State<BarberSignup> createState() => _BarberSignupState();
}

class _BarberSignupState extends State<BarberSignup> {
  String? shopname, mail, password;
  String? latitude, longitude;
  String? shopseat;
  String? status;

  TextEditingController shopseatcontroller = new TextEditingController();
  TextEditingController shopnamecontroller = new TextEditingController();
  TextEditingController emailcontroller = new TextEditingController();
  TextEditingController passwordcontroller = new TextEditingController();
  TextEditingController latController = new TextEditingController();
  TextEditingController longController = new TextEditingController();

  final _formkey = GlobalKey<FormState>();

  registration() async {
    if (password != null && shopname != null && mail != null) {
      try {
        UserCredential barberCredential = await FirebaseAuth.instance
            .createUserWithEmailAndPassword(email: mail!, password: password!);
        String userId = barberCredential.user!.uid;
        await SharedpreferenceHelper().saveUserName(shopnamecontroller.text);
        await SharedpreferenceHelper().saveUserEmail(emailcontroller.text);
        await SharedpreferenceHelper().saveUserId(userId);

        Map<String, dynamic> userInfoMap = {
          "Name": shopnamecontroller.text,
          "Seat": shopseatcontroller.text,
          "Email": emailcontroller.text,
          "Id": userId,
          "Latitude": latController.text,
          "Longitude": longController.text,
          "Status" : "Not Approved",
        };
        await DatabaseMethods().addBarberDetails(userInfoMap, userId);
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content: Text(
              "Registration Successful",
              style: TextStyle(fontSize: 20.0),
            )));
        Navigator.push(
            context, MaterialPageRoute(builder: (context) => BarberLogin()));
      } on FirebaseAuthException catch (e) {
        if (e.code == 'weak-password') {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(
              content: Text(
                "Password Provided is too weak",
                style: TextStyle(fontSize: 20.0),
              )));
        } else if (e.code == "email-already-in-use") {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(
              content: Text(
                "Account Already exists",
                style: TextStyle(fontSize: 20.0),
              )));
        }
      }
    }
  }

  Future<void> _getLocationPermission() async {
    bool serviceEnabled;
    LocationPermission permission;

    // Check if location services are enabled
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      // Location services are not enabled, request the user to enable them
      return Future.error('Location services are disabled.');
    }

    // Check if the app has permission to access location
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      // Request permission if it was denied
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        // Permissions are still denied, exit the function
        return Future.error('Location permissions are denied');
      }
    }

    if (permission == LocationPermission.deniedForever) {
      // Permissions are permanently denied, handle this case
      return Future.error('Location permissions are permanently denied');
    }
  }

  Future<void> _locateMe() async {
    try {
      // Request location permissions
      await _getLocationPermission();

      // Fetch current location if permission is granted
      Position position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high);

      setState(() {
        latController.text = position.latitude.toString();
        longController.text = position.longitude.toString();
        latitude = position.latitude.toString();
        longitude = position.longitude.toString();
      });
    } catch (e) {
      print("Error fetching location: $e");
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text(
        "Failed to get location. Please enable location services.",
        style: TextStyle(fontSize: 20.0),
      )));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        child: Stack(
          children: [
            Container(
              padding: EdgeInsets.only(top: 50.0, left: 30.0),
              height: MediaQuery.of(context).size.height / 2,
              width: MediaQuery.of(context).size.width,
              decoration: BoxDecoration(
                  gradient: LinearGradient(colors: [

                Color(0xFF4E342E),
                Color(0xFF3E2723)
              ])),
              child: Text(
                "Create Your\nAccount",
                style: TextStyle(
                    color: Colors.white,
                    fontSize: 32.0,
                    fontWeight: FontWeight.bold),
              ),
            ),
            Container(
              padding: EdgeInsets.only(
                  top: 40.0, left: 30.0, right: 30.0, bottom: 30.0),
              margin:
                  EdgeInsets.only(top: MediaQuery.of(context).size.height / 4),
              height: MediaQuery.of(context).size.height,
              width: MediaQuery.of(context).size.width,
              decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(40),
                      topRight: Radius.circular(40))),
              child: SingleChildScrollView(
                child: Form(
                  key: _formkey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "Shopname",
                        style: TextStyle(
                            color: Color(0xFFE29452),
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500),
                      ),
                      TextFormField(
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "Please Enter Shopname";
                          }
                          return null;
                        },
                        controller: shopnamecontroller,
                        decoration: InputDecoration(
                            hintText: "Shopname",
                            prefixIcon: Icon(Icons.shop_2_outlined)),
                      ),
                      SizedBox(
                        height: 40.0,
                      ),
                      Text(
                        "Max Seat",
                        style: TextStyle(
                            color: Color(0xFFE29452),
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500),
                      ),
                      TextFormField(
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "Please Enter a number";
                          }
                          return null;
                        },
                        controller: shopseatcontroller,
                        decoration: InputDecoration(
                            hintText: "1",
                            prefixIcon: Icon(Icons.shop_2_outlined)),
                      ),
                      SizedBox(
                        height: 40.0,
                      ),
                      Text(
                        "Gmail",
                        style: TextStyle(
                            color: Color(0xFFE29452),
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500),
                      ),
                      TextFormField(
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "Please Enter E-mail";
                          }
                          return null;
                        },
                        controller: emailcontroller,
                        decoration: InputDecoration(
                            hintText: "Gmail",
                            prefixIcon: Icon(Icons.mail_outline)),
                      ),
                      SizedBox(
                        height: 40.0,
                      ),
                      Text(
                        "Password",
                        style: TextStyle(
                            color: Color(0xFFE29452),
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500),
                      ),
                      TextFormField(
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return "Please Enter Password";
                            }
                            return null;
                          },
                          controller: passwordcontroller,
                          decoration: InputDecoration(
                            hintText: "Password",
                            prefixIcon: Icon(Icons.password_outlined),
                          ),
                          obscureText: true),
                      SizedBox(
                        height: 40.0,
                      ),
                      Text(
                        "Latitude",
                        style: TextStyle(
                            color: Color(0xFFE29452),
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500),
                      ),
                      TextFormField(
                        controller: latController,
                        readOnly: true,
                        decoration: InputDecoration(
                            hintText: "Latitude",
                            prefixIcon: Icon(Icons.location_on_outlined)),
                      ),
                      SizedBox(
                        height: 20.0,
                      ),
                      Text(
                        "Longitude",
                        style: TextStyle(
                            color: Color(0xFFE29452),
                            fontSize: 23.0,
                            fontWeight: FontWeight.w500),
                      ),
                      TextFormField(
                        controller: longController,
                        readOnly: true,
                        decoration: InputDecoration(
                            hintText: "Longitude",
                            prefixIcon: Icon(Icons.location_on_outlined)),
                      ),
                      SizedBox(
                        height: 40.0,
                      ),
                      GestureDetector(
                        onTap: _locateMe,
                        child: Container(
                          padding: EdgeInsets.symmetric(vertical: 10.0),
                          width: MediaQuery.of(context).size.width,
                          decoration: BoxDecoration(
                              gradient: LinearGradient(colors: [
                                Color(0xFFE29452),
                                Color(0xFFE29452),
                                Color(0xFFE29452),
                              ]),
                              borderRadius: BorderRadius.circular(30.0)),
                          child: Center(
                              child: Text(
                            "Locate Our Shop",
                            style: TextStyle(
                                color: Colors.white,
                                fontSize: 24.0,
                                fontWeight: FontWeight.bold),
                          )),
                        ),
                      ),
                      SizedBox(
                        height: 10.0,
                      ),
                      GestureDetector(
                        onTap: () {
                          if (_formkey.currentState!.validate()) {
                            setState(() {
                              mail = emailcontroller.text;
                              shopname = shopnamecontroller.text;
                              password = passwordcontroller.text;
                              latitude = latController.text;
                              longitude = longController.text;
                            });
                            registration();
                          }
                        },
                        child: Container(
                          padding: EdgeInsets.symmetric(vertical: 10.0),
                          width: MediaQuery.of(context).size.width,
                          decoration: BoxDecoration(
                              gradient: LinearGradient(colors: [
                                Color(0xFFE29452),
                                Color(0xFFE29452),
                                Color(0xFFE29452),
                              ]),
                              borderRadius: BorderRadius.circular(30.0)),
                          child: Center(
                              child: Text(
                            "SIGN UP",
                            style: TextStyle(
                                color: Colors.white,
                                fontSize: 24.0,
                                fontWeight: FontWeight.bold),
                          )),
                        ),
                      ),
                      SizedBox(
                        height: 10.0,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Text(
                            "Already have an account",
                            style: TextStyle(
                                color: Color(0xff311937),
                                fontSize: 17.0,
                                fontWeight: FontWeight.w500),
                          ),
                        ],
                      ),
                      GestureDetector(
                        onTap: () {
                          Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => BarberLogin()));
                        },
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: [
                            Text(
                              "Sign In",
                              style: TextStyle(
                                  color: Color(0xFFE29452),
                                  fontSize: 22.0,
                                  fontWeight: FontWeight.bold),
                            )
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
